# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–π ORM"
# –¶–µ–ª—å: –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
#
# –ó–∞–¥–∞—á–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π":
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è
# –ø—É–Ω–∫—Ç–∞–º –∑–∞–¥–∞—á–∏ –Ω–∏–∂–µ.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª crud_functions.py, –Ω–∞–ø–∏—Å–∞–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏–≤ –≤ –Ω—ë–º —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# initiate_db –¥–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã Users, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ SQL –∑–∞–ø—Ä–æ—Å–∞.
# –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
# 1. id - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
# 2. username - —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
# 3. email - —Ç–µ–∫—Å—Ç (–Ω–µ –ø—É—Å—Ç–æ–π)
# 4. age - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ –ø—É—Å—Ç–æ–π)
# 5. balance - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ –ø—É—Å—Ç–æ–π)
# add_user(username, email, age), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—á—Ç—É –∏ –≤–æ–∑—Ä–∞—Å—Ç.
# –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É Users –≤–∞—à–µ–π –ë–î –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
# –ë–∞–ª–∞–Ω—Å —É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω 1000. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# SQL –∑–∞–ø—Ä–æ—Å.
# is_included(username) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Users, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ False. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL –∑–∞–ø—Ä–æ—Å.

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import time
from collections import defaultdict
from pprint import pprint
from crud_functions import *
from kandinsky import *

API = 'XXX'

bot = Bot(token=API)
dp = Dispatcher(bot, storage=MemoryStorage())

kb = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'),
            KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        ],
        [
            KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
            KeyboardButton(text='–ö—É–ø–∏—Ç—å')
        ]
    ]
)

inline_kb = InlineKeyboardMarkup()
inline_butt1 = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories')
inline_butt2 = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
inline_kb.row(inline_butt1, inline_butt2)

logging.basicConfig(
    filename='tg-bot.log', filemode='a', encoding='utf-8',
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO)


def decor_log(func, message, txt):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–µ–¥–µ–Ω–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param func: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∏–ø: types.Message –∏–ª–∏ types.CallbackQuery
    :param txt: –¢–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ–±–µ—Ä–Ω—É—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
    """
    async def log_writer(*args, **kwargs):
        try:
            logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}: {message["text"]}')
        except KeyError:
            logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ - {message["data"]}')
        logging.info(f'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {message}')
        rez = await func(*args, **kwargs)
        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {txt}')
        return rez

    return log_writer


class UserState(StatesGroup):
    gender = State()
    age = State()
    growth = State()
    weight = State()

class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()
    balance = State()

class UserData():
    DATA = defaultdict(dict, {})


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    txt = ('üåø –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π '
           '–í–∞–º –Ω—É–∂–Ω–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –≤ –¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å".'
           '\n\n–ê –µ—â–µ, <b>–≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>, –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å <b>–ö–∞–Ω–¥–∏–Ω—Å–∫–æ–º—É 3.0</b> '
           '–ø—Ä–æ—Å—Ç–æ –Ω–∞–±—Ä–∞–≤ –µ–≥–æ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å. '
           '–û—Ç–≤–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã üòé\n\n'
           '–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç: <pre>–±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é</pre>'
           '–ò —è –ø–æ–∫–∞–∂—É –í–∞–º —Å–≤–æ–π –ø–æ—Ä—Ç—Ä–µ—Ç.'
           )
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=kb, parse_mode='HTML')


@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message: types.Message):
    print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}')
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:'
    message.answer = decor_log(message.reply, message, txt)
    await message.answer(txt, reply_markup=inline_kb)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call: types.CallbackQuery):
    txt = ('üßÆ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞:\n\n'
           '<b><i>–¥–ª—è –º—É–∂—á–∏–Ω:</i>\nüôé‚Äç‚ôÇÔ∏è‚Äç 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5</b>\n\n'
           '<b><i>–¥–ª—è –∂–µ–Ω—â–∏–Ω:</i>\nüôç‚Äç‚ôÄÔ∏è 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161</b>\n\n'
           '–§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢):\n\n'
           '<b>‚úÖ –ò–ú–¢ = –≤–µ—Å (–∫–≥) / —Ä–æ—Å—Ç (–º) ^ 2</b>')
    call.answer = decor_log(call.answer, call, txt)
    await call.message.answer(txt, parse_mode='HTML')
    await call.answer()


@dp.callback_query_handler(text='calories')
async def set_gender(call: types.CallbackQuery):
    if call.from_user.first_name not in UserData.DATA:
        UserData.DATA[call.from_user.first_name] = {}
    txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):'
    call.answer = decor_log(call.answer, call, txt)
    await call.message.answer(txt)
    await UserState.gender.set()
    await call.answer()


@dp.message_handler(state=UserState.gender)
async def set_age(message: types.Message, state):
    await state.update_data(gender=message.text)
    txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text.replace(',', '.'))
    txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message: types.Message, state: FSMContext):
    await state.update_data(growth=message.text.replace(',', '.'))
    txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt)
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text.replace(',', '.'))
    UserData.DATA[message.from_user.first_name] |= await state.get_data()
    # locals().update(UserData.DATA[message["from"]["first_name"]])
    pprint(UserData.DATA)

    data = UserData.DATA[message["from"]["first_name"]]

    try:
        if data['gender'].upper() == '–ñ':
            calories = 10 * float(data['weight']) + 6.25 * float(data['growth']) - 5 * float(data['age']) - 161
        elif data['gender'].upper() == '–ú':
            calories = 10 * float(data['weight']) + 6.25 * float(data['growth']) - 5 * float(data['age']) + 5
        else:
            raise ValueError
        imb = round(float(data['weight']) / (float(data['growth']) / 100) ** 2, 1)
    except ValueError or ZeroDivisionError:
        txt = '–í—ã –≤–≤–µ–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    else:
        txt = (f'<b>–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞: <u>{calories}</u> –ö–∫–∞–ª</b>\n\n'
               f'<b>–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢): <u>{imb}</u> –∫–≥/–∫–≤.–º</b>\n\n'
               f'–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –í–û–ó —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ò–ú–¢:\n\n'
               f'üíô<b>16 –∏ –º–µ–Ω–µ–µ</b> ‚Äî –í—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞\n\n'
               f'ü©µ <b>16 - 18,5</b> ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è (–¥–µ—Ñ–∏—Ü–∏—Ç) –º–∞—Å—Å–∞ —Ç–µ–ª–∞\n\n'
               f'üíö <b>18,5 - 25</b> ‚Äî –ù–æ—Ä–º–∞\n\n'
               f'üíõ <b>25 - 30</b> ‚Äî –ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ (–ø—Ä–µ–¥–æ–∂–∏—Ä–µ–Ω–∏–µ)\n\n'
               f'üß° <b>30 - 35</b> ‚Äî –û–∂–∏—Ä–µ–Ω–∏–µ 1 —Å—Ç–µ–ø–µ–Ω–∏\n\n'
               f'‚ù§Ô∏è <b>35 - 40</b> ‚Äî –û–∂–∏—Ä–µ–Ω–∏–µ 2 —Å—Ç–µ–ø–µ–Ω–∏\n\n'
               f'ü©∑ <b>40 –∏ –±–æ–ª–µ–µ</b> ‚Äî –û–∂–∏—Ä–µ–Ω–∏–µ 3 —Å—Ç–µ–ø–µ–Ω–∏')
        if imb > 25:
            txt += ('\n\n\t<b>‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã. –ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫—É '
                    '"–ö—É–ø–∏—Ç—å" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é. –° –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, –∫–æ–º–∞–Ω–¥–∞ –ú–∞–≥–∞–∑–∏–Ω–∞ –∑–¥–æ—Ä–æ–≤—å—è!</b>')
        set_user_info(message.from_user.first_name, data['gender'], data['age'], data['growth'], data['weight'])
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=kb, parse_mode='HTML')
    await state.finish()


@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message: types.Message):
    products = get_all_products()
    # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤—ã—Ö —Å–±–æ—Ä–æ–∫ –∏–∑ –±–∞–∑—ã products
    inline_buy = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=products[i + j * 3][1], callback_data='product_buying') for i in range(3)
             if (i + j * 3) < len(products)
             ] for j in range((len(products) - 1) // 3 + 1)
        ]
    )
    for product in products:
        txt = f'üöÄ <i>{product[1]}</i> \n–û–ø–∏—Å–∞–Ω–∏–µ: <b>{product[2]}</b> \n–¶–µ–Ω–∞: {product[3]} ‚ÇΩ'
        try:
            with open(product[4], mode='rb') as img:
                message_answer_log = decor_log(message.answer_photo, message, txt)
                await message_answer_log(img, txt, parse_mode='HTML')
        except Exception as err:
            print(err, err.args)
            message_answer_log = decor_log(message.answer, message, txt)
            await message_answer_log(txt)
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, reply_markup=inline_buy)


@dp.callback_query_handler(text='product_buying')
async def send_confirm_message(call: types.CallbackQuery):
    txt = '<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!</b>'
    call.answer = decor_log(call.answer, call, txt)
    await call.message.answer(txt, parse_mode='HTML')
    await call.answer()
    if 'buy' not in UserData.DATA[call.from_user.first_name]:
        UserData.DATA[call.from_user.first_name]['buy'] = {}
    UserData.DATA[call.from_user.first_name]['buy'][time.ctime()] = '–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç'
    pprint(UserData.DATA)


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: types.Message):
    txt = 'üåø –Ø - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä—É—Ç–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∫–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å!'
    message.answer = decor_log(message.reply, message, txt)
    await message.answer(txt)


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sing_up(message: types.Message):
    txt = ('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç, <b>–¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ '
           '/cancel –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</b>):')
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, parse_mode='HTML')
    await RegistrationState.username.set()


@dp.message_handler(state=RegistrationState.username)
async def set_username(message: types.Message, state):
    if message.text == '/cancel':
        txt = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–æ.</b>'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt, reply_markup=kb, parse_mode='HTML')
        await state.finish()
    elif not is_included(message.text):
        await state.update_data(username=message.text)
        txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt)
        await RegistrationState.email.set()
    else:
        txt = '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:'
        message.answer = decor_log(message.reply, message, txt)
        await message.answer(txt)
        await RegistrationState.username.set()


@dp.message_handler(state=RegistrationState.email)
async def set_email(message: types.Message, state):
    if message.text == '/cancel':
        txt = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–æ.</b>'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt, reply_markup=kb, parse_mode='HTML')
        await state.finish()
    else:
        await state.update_data(email=message.text)
        txt = '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt)
        await RegistrationState.age.set()


@dp.message_handler(state=RegistrationState.age)
async def set_age(message: types.Message, state):
    if message.text == '/cancel':
        txt = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–æ.</b>'
        message.answer = decor_log(message.answer, message, txt)
        await message.answer(txt, reply_markup=kb, parse_mode='HTML')
        await state.finish()
    else:
        await state.update_data(age=message.text)
        data = await state.get_data()
        try:
            add_user(data['username'], data['email'], data['age'])
            txt = 'üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.'
            message.answer = decor_log(message.answer, message, txt)
            await message.answer(txt, reply_markup=kb)
            await state.finish()
        except DataError as err:
            txt = err.args[0] + '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel:'
            message.answer = decor_log(message.answer, message, txt)
            await message.answer(txt)
            await RegistrationState.username.set()


@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def save_photo(message: types.Message, state):
    print('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ')
    await message.photo[-1].download(destination_file='image/photo.jpg')
    txt = 'üåà –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ—Ç —ç—Ç–æ —Ñ–æ—Ç–æ. –ó–∞—á–µ–º –æ–Ω–æ –º–Ω–µ? ü§î'
    try:
        with open('image/photo.jpg', mode='rb') as img:
            message_answer_log = decor_log(message.answer_photo, message, txt)
            await message_answer_log(img, txt, parse_mode='HTML')
    except Exception as err:
        print(err, err.args)
        message_answer_log = decor_log(message.answer, message, txt)
        await message_answer_log(txt)


@dp.message_handler()
async def all_massages(message: types.Message):
    # dir_ = f'./image/' + message.text.replace("\n", "_").split(".")[0]
    dir_ = f'image/kandinski'
    try:
        os.mkdir(os.getcwd().replace("\\", "/") + '/' + dir_)
    except FileExistsError:
        print('exist')

    try:
        file_name = await gen(message.text.replace("\n", " "), dir_)
        print(f'—Å–¥–µ–ª–∞–Ω–æ {file_name}')
        txt = f'‚òùÔ∏è –≠—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: \n<pre><b>{message.text}</b></pre>'
        with open(file_name, mode='rb') as img:
            message_answer_log = decor_log(message.answer_photo, message, txt)
            await message_answer_log(img, txt, parse_mode='HTML')
    except Exception as err:
        raise
        # print(err, err.args)
        # message_answer_log = decor_log(message.answer, message, str(err.args))
        # await message_answer_log(str(err.args))

    txt = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.'
    message.answer = decor_log(message.answer, message, txt)
    await message.answer(txt, parse_mode='HTML')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
